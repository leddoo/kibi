def Nat::add (a: Nat, b: Nat): Nat :=
    Nat::rec(b,
        lam(_: _) => _,
        a,
        lam(_: _, r: _) => Nat::succ(r))

reduce Nat::add(1, 2)


def quick_maffs: Eq(_, Nat::add(2, 2), 4) := Eq::refl(_, 4)


-- axiom ax_sorry.{l} (T: Sort(l)): T


def congr_arg.{a, b} (A: Sort(a), B: Sort(b), f: Pi(_: A) -> B, x1: A, x2: A)
    : Pi (_: Eq(_, x1, x2)) -> Eq(_, f(x1), f(x2))
    := lam(heq: _) =>
        Eq::rec(_, _, _, heq,
            lam(x2: _) => Eq(_, _, f(x2)),
            Eq::refl(_, f(x1)))


def Nat::add_zero (n: Nat): Eq(_, Nat::add(n, 0), n) :=
    Eq::refl(_, n)

def Nat::zero_add (n: Nat): Eq(_, Nat::add(0, n), n) :=
    Nat::rec(n,
        lam(n: _) => Eq(_, Nat::add(0, n), n),
        Eq::refl(Nat, 0),
        lam(n: Nat, ih: Eq(_, Nat::add(0, n), n)) =>
            congr_arg(_, _, _, _, _, ih))


-- yeah, don't uncomment that...
-- reduce Nat::zero_add

