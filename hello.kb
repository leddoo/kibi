def Nat::add (a: Nat, b: Nat): Nat :=
    Nat::rec(_,
        a,
        lam(_: _, r: _) => Nat::succ(r),
        b)

reduce Nat::add(1, 2)


def quick_maffs: Eq(_, Nat::add(2, 2), 4) := Eq::refl(_, 4)


axiom ax_sorry.{l} (T: Sort(l)): T


def Eq::symm.{t} (T: Sort(t), a: T, b: T): Pi(_: Eq(_, a, b)) -> Eq(_, b, a) :=
    lam(heq: _) => Eq::rec(_, _, _, Eq::refl(_, _), _, heq)


def congr_arg.{a, b} (A: Sort(a), B: Sort(b), a1: A, a2: A, f: Pi(_: A) -> B)
    : Pi (_: Eq(_, a1, a2)) -> Eq(_, f(a1), f(a2))
    := lam(heq: _) =>
        Eq::rec(_, _, _, Eq::refl(_, _), _, heq)


def Nat::succ::inj (a: Nat, b: Nat)
    : Pi(_: Eq(_, Nat::succ(a), Nat::succ(b))) -> Eq(_, a, b)
    := ax_sorry(_)


def Nat::add_zero (n: Nat): Eq(_, Nat::add(n, 0), n) :=
    Eq::refl(_, n)

def Nat::zero_add (n: Nat): Eq(_, Nat::add(0, n), n) :=
    Nat::rec(_,
        Eq::refl(_, _),
        lam(n: _, ih: _) => congr_arg(_, _, _, _, _, ih),
        n)

-- a.succ + b = (a + b).succ
def Nat::succ_add (a: Nat, b: Nat)
    : Eq(_, Nat::add(Nat::succ(a), b), Nat::succ(Nat::add(a, b)))
    := Nat::rec(_,
        Eq::refl(_, _),
        lam(b: _, ih: _) => congr_arg(_, _, _, _, _, ih),
        b)

def Nat::add_comm (a: Nat, b: Nat): Eq(_, Nat::add(a, b), Nat::add(b, a)) :=
    Nat::rec(_,
        Eq::symm(_, _, _, Nat::zero_add(a)),
        lam(b: _, ih: _) =>
            Eq::rec(_, _, _,
                congr_arg(_, _, _, _, Nat::succ, ih),
                _,
                Eq::symm(_, _, _, Nat::succ_add(b, a))),
        b)

def Nat::add_assoc (a: Nat, b: Nat, c: Nat)
    : Eq(_, Nat::add(Nat::add(a, b), c), Nat::add(a, Nat::add(b, c)))
    := Nat::rec(_,
        Eq::refl(_, _),
        lam(c: _, ih: _) => congr_arg(_, _, _, _, Nat::succ, ih),
        c)


def Nat::add_left_comm (a: Nat, b: Nat, k: Nat)
    : Eq(_, Nat::add(a, Nat::add(b, k)), Nat::add(b, Nat::add(a, k)))
    := Nat::rec(_,
        Nat::add_comm(a, b),
        lam(k: _, ih: _) => congr_arg(_, _, _, _, Nat::succ, ih),
        k)

def Nat::add_right_comm (a: Nat, b: Nat, k: Nat)
    : Eq(_, Nat::add(Nat::add(k, a), b), Nat::add(Nat::add(k, b), a))
    := Nat::rec(_,
        Eq::rec(_, _, _,
            Eq::rec(_, _, _,
                Nat::add_comm(a, b),
                _, Eq::symm(_, _, _, Nat::zero_add(b))),
            _, Eq::symm(_, _, _, Nat::zero_add(a))),
        ax_sorry(_),
        k)


def Nat::add_left_cancel (a: Nat, b: Nat, k: Nat)
    : Pi(_: Eq(_, Nat::add(k, a), Nat::add(k, b))) -> Eq(_, a, b)
    := Nat::rec(_,
        lam(h: _) => Eq::rec(_, _, _, Eq::rec(_, _, _, h, _, Nat::zero_add(a)), _, Nat::zero_add(b)),
        lam(k: _, ih: _, h: _) =>
            ax_sorry(_),
        k)

def Nat::add_right_cancel (a: Nat, b: Nat, k: Nat)
    : Pi(_: Eq(_, Nat::add(a, k), Nat::add(b, k))) -> Eq(_, a, b)
    := Nat::rec(_,
        ax_sorry(_),
        ax_sorry(_),
        k)


-- yeah, don't uncomment that...
-- reduce Nat::zero_add

